#!/bin/sh

# launch failed: Remote "" is unknown or unreachable.
# https://github.com/canonical/multipass/issues/1853
# sudo snap restart multipass.multipassd

set -xe

INSTANCE_NAME="dave"
USERNAME="$(id -un)"

# The following makes this script self contained
LAUNCH_YAML=$(
cat <<'EOF'
#cloud-config

package_update: true
package_upgrade: true
package_reboot_if_required: false

users:
  - name: @USERNAME@
    sudo: ALL=(ALL) NOPASSWD:ALL
    groups: users, admin
    lock_passwd: true
    homedir: /home/@USERNAME@

packages:
  - curl
  - exfat-fuse  # for appimages
  - git
  - gnome-keyring
  - iproute2
  - jq
  - rsync
  - socat
  - sysstat
  - vim

snap:
  commands:
    - snap install docker
    - snap install charmcraft --classic
    - snap install rockcraft --classic --edge

write_files:
- content: |
    #!/bin/sh
    set -xe
    USERNAME="$(id -un)"
    [ -n "$1" ] && CHANNEL="$1" || CHANNEL="1.27-strict/stable"
    sudo snap remove --purge microk8s
    sudo snap install microk8s --channel="$CHANNEL"
    mkdir -p "/home/$USERNAME/.kube"
    sudo chown -f -R "$USERNAME" "/home/$USERNAME/.kube"
    sudo snap alias microk8s.kubectl kubectl
    sudo microk8s.enable dns
    sudo microk8s.kubectl rollout status deployments/coredns -n kube-system -w --timeout=600s
    sudo microk8s.enable hostpath-storage ingress
    sudo microk8s.enable ingress
    sudo microk8s.kubectl rollout status deployments/hostpath-provisioner -n kube-system -w --timeout=600s
    sudo microk8s.kubectl rollout status daemonsets/nginx-ingress-microk8s-controller -n ingress -w --timeout=600s
    sudo microk8s.enable rbac
    sudo microk8s.enable registry
    IPADDR=$(ip -4 -j route get 2.2.2.2 | jq -r '.[] | .prefsrc')
    sudo microk8s.enable "metallb:$IPADDR-$IPADDR"
    sudo microk8s start
    sudo microk8s config > "/home/$USERNAME/.kube/config"
  path: /usr/local/bin/reset_microk8s
  permissions: '0755'
- content: |
    #!/bin/sh
    set -xe
    USERNAME="$(id -un)"
    [ -n "$1" ] && TYPE="$1" || TYPE="CHANNEL"
    [ -n "$2" ] && TARGET="$2" || TARGET="3.1"
    reset_microk8s
    reset_lxd
    sudo snap remove --purge juju
    rm -rf "/home/$USERNAME/.local/share/juju"
    case "$TYPE" in
      chan*|CHAN*)
        sudo snap install juju --classic --channel="$TARGET";;
      rev*|REV*)
        sudo snap install juju --classic --revision="$TARGET";;
      ver*|VER*)
        build_juju "$TARGET"
    esac
    juju update-public-clouds --client
    juju update-k8s --client microk8s
    juju bootstrap microk8s mk8s --verbose --show-log
    juju model-defaults --cloud=microk8s logging-config='<root>=WARNING;unit=DEBUG;http=TRACE'
    juju add-model dev
  path: /usr/local/bin/reset_juju
  permissions: '0755'
- content: |
    #!/bin/sh
    build_dir="$(mktemp -d -p "$HOME")"
    cd "$build_dir"
    git clone --depth 1 --branch "juju-$1" https://github.com/juju/juju.git .
    sudo snap install snapcraft --classic
    snapcraft --use-lxd
    sudo snap install *.snap --dangerous
    sudo snap connect juju:config-lxd
    sudo snap connect juju:dot-aws
    sudo snap connect juju:dot-azure
    sudo snap connect juju:dot-google
    sudo snap connect juju:dot-kubernetes
    sudo snap connect juju:dot-local-share-juju
    sudo snap connect juju:dot-maas
    sudo snap connect juju:dot-openstack
    sudo snap connect juju:dot-oracle
    sudo snap connect juju:lxd lxd
    sudo snap connect juju:network
    sudo snap connect juju:network-bind
    sudo snap connect juju:peers microk8s
    sudo snap connect juju:ssh-keys
    rm -rf "$build_dir"
  path: /usr/local/bin/build_juju
  permissions: '0755'
- content: |
    #!/bin/sh
    sudo snap remove --purge lxd
    sudo snap install lxd
    lxd init --auto
  path: /usr/local/bin/reset_lxd
  permissions: '0755'

runcmd:
  - |
    # disable swap
    sysctl -w vm.swappiness=0
    echo "vm.swappiness = 0" | tee -a /etc/sysctl.conf
    swapoff -a

  - |
    # setup docker
    addgroup --system docker
    adduser @USERNAME@ docker
    snap disable docker
    snap enable docker

  - |
    # add lxd group for later
    # Follow: https://github.com/canonical/ubuntu-core-desktop-snapd/blob/master/osutil/user.go#L150
    groupadd --system lxd
    useradd --system --home-dir /nonexistent --no-create-home --shell /bin/false --no-user-group -g lxd lxd
    adduser @USERNAME@ lxd
    # fix lxd not having network when docker is installed
    iptables -P FORWARD ACCEPT

  - |
    # add microk8s groups for later
    # Follow: https://github.com/canonical/ubuntu-core-desktop-snapd/blob/master/osutil/user.go#L150
    # 584789 should be used as uid/gid for snap_microk8s: https://github.com/snapcore/snapd/blob/master/snap/system_usernames.go#L156C24-L156C30
    groupadd --system --gid 584789 snap_microk8s
    useradd --system --home-dir /nonexistent --no-create-home --shell /bin/false --no-user-group -g snap_microk8s --uid 584789 snap_microk8s
    adduser @USERNAME@ snap_microk8s
    groupadd --system microk8s
    useradd --system --home-dir /nonexistent --no-create-home --shell /bin/false --no-user-group -g microk8s microk8s
    adduser @USERNAME@ microk8s

  - |
    # disable unnecessary services
    systemctl disable man-db.timer man-db.service --now
    systemctl disable apport.service apport-autoreport.service  --now
    systemctl disable apt-daily.service apt-daily.timer --now
    systemctl disable apt-daily-upgrade.service apt-daily-upgrade.timer --now
    systemctl disable unattended-upgrades.service --now
    systemctl disable motd-news.service motd-news.timer --now
    systemctl disable bluetooth.target --now
    systemctl disable ua-messaging.service ua-messaging.timer --now
    systemctl disable ua-timer.timer ua-timer.service --now
    systemctl disable systemd-tmpfiles-clean.timer --now

  - |
    # apt cleanup
    apt remove -y landscape-client landscape-common
    apt-get autoremove -y
EOF
)


if [ "$1" = "--clean" ]; then
  printf 'Are you sure (y/n)? '
  read -r answer
  if [ "$answer" != "${answer#[Yy]}" ] ;then
    if multipass list | grep -v "Deleted" | grep "^$INSTANCE_NAME " > /dev/null; then
      multipass delete "$INSTANCE_NAME"
      multipass purge
    fi
  fi
fi

if ! multipass list | grep -v "Deleted" | grep "^$INSTANCE_NAME " > /dev/null; then
  # We're purging to remove the instance if it was deleted
  multipass purge
  # We're creating the temporary file in $HOME to be sure 
  # that multipass as a snap can read it
  launch_file="$(mktemp -p "$HOME")"
  echo "$LAUNCH_YAML" > "$launch_file"
  sed -i -e "s|@USERNAME@|${USERNAME}|g" "$launch_file"
  multipass launch -vvvv -n "$INSTANCE_NAME" --cloud-init "$launch_file" --cpus 4 --memory 16G --disk 128G || true
  rm "$launch_file"
fi

multipass start -vvvv "$INSTANCE_NAME" || true

# https://github.com/canonical/multipass/issues/3252
while [ -z "$mountflag" ]; do
  out="$(multipass mount -vvvv -g "$(id -g):1000" -u "$(id -u):1000" ~ "$INSTANCE_NAME" 2>&1 || true)"
  if $? || printf "%s" "$out" | grep "already mounted"; then
    mountflag="ok"
  else
    sleep 1
  fi
done

multipass exec -vvvv "$INSTANCE_NAME" -- sudo su -l -s /bin/bash "$USERNAME"
