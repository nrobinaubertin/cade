#!/bin/sh

INSTANCE_NAME="cade"
SHARE_DIR="$HOME/.local/share/cade"
USERNAME="$(id -un)"
LAUNCH_DIR="$(pwd)"

LAUNCH_YAML=$(
cat <<'EOF'
#cloud-config

package_update: true
package_upgrade: true
package_reboot_if_required: false

users:
  - name: @USERNAME@
    sudo: ALL=(ALL) NOPASSWD:ALL
    groups: users, admin
    lock_passwd: true
    homedir: /home/@USERNAME@

packages:
  - curl
  - exfat-fuse  # for appimages
  - git
  - gnome-keyring
  - iproute2
  - jq
  - rsync
  - socat
  - sysstat
  - vim

snap:
  commands:
    - snap install docker
    - snap install charmcraft --classic
    - snap install rockcraft --classic --edge

write_files:
- content: |
    #!/bin/sh
    USERNAME="$(id -un)"
    [ -n "$1" ] && TYPE="$1" || TYPE="CHANNEL"
    [ -n "$2" ] && TARGET="$2" || TARGET="1.27-strict/stable"
    sudo snap remove --purge microk8s
    case "$TYPE" in
      chan*|CHAN*)
        sudo snap install microk8s --channel="$TARGET";;
      dir*|DIR*)
        cd "$TARGET"
        sudo snap ack microk8s_*.assert
        sudo snap install microk8s_*.snap
        find . -name "*.tar" | xargs -n1 sudo microk8s ctr images import --platform amd64;;
    esac
    mkdir -p "/home/$USERNAME/.kube"
    sudo chown -f -R "$USERNAME" "/home/$USERNAME/.kube"
    sudo snap alias microk8s.kubectl kubectl
    sudo microk8s.enable dns
    sudo microk8s.kubectl rollout status deployments/coredns -n kube-system -w --timeout=600s
    sudo microk8s.enable hostpath-storage
    sudo microk8s.enable ingress
    sudo microk8s.kubectl rollout status deployments/hostpath-provisioner -n kube-system -w --timeout=600s
    sudo microk8s.kubectl rollout status daemonsets/nginx-ingress-microk8s-controller -n ingress -w --timeout=600s
    sudo microk8s.enable rbac
    sudo microk8s.enable registry
    IPADDR=$(ip -4 -j route get 2.2.2.2 | jq -r '.[] | .prefsrc')
    sudo microk8s.enable "metallb:$IPADDR-$IPADDR"
    sudo microk8s start
    sudo microk8s config > "/home/$USERNAME/.kube/config"
  path: /usr/local/bin/reset_microk8s
  permissions: '0755'
- content: |
    #!/bin/sh
    set -xe
    USERNAME="$(id -un)"
    [ -n "$1" ] && TYPE="$1" || TYPE="CHANNEL"
    [ -n "$2" ] && TARGET="$2" || TARGET="3.1"
    [ "3.0" = "$(printf "3.0\\n%s" "$TARGET" | sort -V | head -n1)" ] && oldflag="no" || oldflag="yes"
    sudo snap remove --purge juju
    rm -rf "/home/$USERNAME/.local/share/juju"
    case "$TYPE" in
      chan*|CHAN*)
        reset_microk8s
        reset_lxd
        sudo snap install juju --classic --channel="$TARGET";;
      rev*|REV*)
        reset_microk8s
        reset_lxd
        sudo snap install juju --classic --revision="$TARGET";;
      ver*|VER*)
        reset_microk8s
        reset_lxd
        build_juju "$TARGET";;
      dir*|DIR*)
        cd "$TARGET"
        reset_microk8s DIR "$TARGET"
        reset_lxd DIR "$TARGET"
        sudo snap ack juju_*.assert
        sudo snap install juju_*.snap
    esac
    juju update-public-clouds --client
    juju update-k8s --client microk8s
    juju bootstrap microk8s mk8s
    if [ "$oldflag" = "no" ]; then
      juju model-defaults --cloud=microk8s logging-config='<root>=WARNING;unit=DEBUG;http=TRACE'
    else
      juju model-defaults microk8s logging-config='<root>=WARNING;unit=DEBUG;http=TRACE'
    fi
    juju add-model dev
    if [ "$3" = "--with-machine" ]; then
      juju bootstrap localhost lxd
      if [ "$oldflag" = "no" ]; then
        juju model-defaults --cloud=localhost logging-config='<root>=WARNING;unit=DEBUG;http=TRACE'
      else
        juju model-defaults localhost logging-config='<root>=WARNING;unit=DEBUG;http=TRACE'
      fi
      microk8s.config | juju add-k8s mk8s --controller=lxd
      juju add-model devk8s mk8s
      juju add-model db localhost
    fi
  path: /usr/local/bin/reset_juju
  permissions: '0755'
- content: |
    #!/bin/sh
    build_dir="$(mktemp -d -p "$HOME")"
    cd "$build_dir"
    git clone --depth 1 --branch "juju-$1" https://github.com/juju/juju.git .
    sudo snap install snapcraft --classic
    snapcraft --use-lxd
    sudo snap install *.snap --dangerous
    sudo snap connect juju:config-lxd
    sudo snap connect juju:dot-aws
    sudo snap connect juju:dot-azure
    sudo snap connect juju:dot-google
    sudo snap connect juju:dot-kubernetes
    sudo snap connect juju:dot-local-share-juju
    sudo snap connect juju:dot-maas
    sudo snap connect juju:dot-openstack
    sudo snap connect juju:dot-oracle
    sudo snap connect juju:lxd lxd
    sudo snap connect juju:network
    sudo snap connect juju:network-bind
    sudo snap connect juju:peers microk8s
    sudo snap connect juju:ssh-keys
    rm -rf "$build_dir"
  path: /usr/local/bin/build_juju
  permissions: '0755'
- content: |
    #!/bin/sh
    [ -n "$1" ] && TYPE="$1" || TYPE="CHANNEL"
    [ -n "$2" ] && TARGET="$2" || TARGET="5.19/stable"
    sudo snap remove --purge lxd
    case "$TYPE" in
      chan*|CHAN*)
        sudo snap install lxd --channel="$TARGET";;
      dir*|DIR*)
        cd "$TARGET"
        sudo snap ack lxd_*.assert
        sudo snap install lxd_*.snap
    esac
    lxd init --auto
    sudo iptables -P FORWARD ACCEPT
  path: /usr/local/bin/reset_lxd
  permissions: '0755'

runcmd:
  - |
    # disable swap
    sysctl -w vm.swappiness=0
    echo "vm.swappiness = 0" | tee -a /etc/sysctl.conf
    swapoff -a

  - |
    # setup docker
    addgroup --system docker
    adduser @USERNAME@ docker
    snap disable docker
    snap enable docker

  - |
    # add lxd group for later
    # Follow: https://github.com/canonical/ubuntu-core-desktop-snapd/blob/master/osutil/user.go#L150
    groupadd --system lxd
    useradd --system --home-dir /nonexistent --no-create-home --shell /bin/false --no-user-group -g lxd lxd
    adduser @USERNAME@ lxd

  - |
    # add microk8s groups for later
    # Follow: https://github.com/canonical/ubuntu-core-desktop-snapd/blob/master/osutil/user.go#L150
    # 584789 should be used as uid/gid for snap_microk8s: https://github.com/snapcore/snapd/blob/master/snap/system_usernames.go#L156C24-L156C30
    groupadd --system --gid 584789 snap_microk8s
    useradd --system --home-dir /nonexistent --no-create-home --shell /bin/false --no-user-group -g snap_microk8s --uid 584789 snap_microk8s
    adduser @USERNAME@ snap_microk8s
    groupadd --system microk8s
    useradd --system --home-dir /nonexistent --no-create-home --shell /bin/false --no-user-group -g microk8s microk8s
    adduser @USERNAME@ microk8s

  - |
    # disable unnecessary services
    systemctl disable man-db.timer man-db.service --now
    systemctl disable apport.service apport-autoreport.service  --now
    systemctl disable apt-daily.service apt-daily.timer --now
    systemctl disable apt-daily-upgrade.service apt-daily-upgrade.timer --now
    systemctl disable unattended-upgrades.service --now
    systemctl disable motd-news.service motd-news.timer --now
    systemctl disable bluetooth.target --now
    systemctl disable ua-messaging.service ua-messaging.timer --now
    systemctl disable ua-timer.timer ua-timer.service --now
    systemctl disable systemd-tmpfiles-clean.timer --now

  - |
    # apt cleanup
    apt remove -y landscape-client landscape-common
    apt-get autoremove -y
EOF
)

if [ "$1" = "expose" ]; then
  if [ -z "$2" ]; then
    echo "You need to specify a port"
    exit 1
  fi
  cade unexpose
  mkdir -p "$SHARE_DIR"
  [ -f "$SHARE_DIR"/sshkey ] || ssh-keygen -N "" -t ed25519 -C "cade-multipass-$(date -I)" -f "$SHARE_DIR/sshkey"
  sed -i '/cade-multipass/d' "$HOME/.ssh/authorized_keys"
  cat "$SHARE_DIR/sshkey.pub" >> "$HOME/.ssh/authorized_keys"
  cade_ip="$(multipass list | grep "$INSTANCE_NAME" | awk '{print $3}')"
  sudo ssh -N -f -o "StrictHostKeyChecking=accept-new" -M -S "$SHARE_DIR/expose-tunnel" -i "$SHARE_DIR/sshkey" -L "$2:127.0.0.1:$2" -l "$USERNAME" "$cade_ip"
  exit
fi

if [ "$1" = "unexpose" ]; then
  if [ -S "$SHARE_DIR/expose-tunnel" ]; then
    cade_ip="$(multipass list | grep "$INSTANCE_NAME" | awk '{print $3}')"
    sudo ssh -S "$SHARE_DIR/expose-tunnel" -O exit "$cade_ip"
  fi
  exit
fi

if [ "$1" = "clean" ]; then
  printf 'Are you sure (y/N)? '
  read -r answer
  if [ "$answer" != "${answer#[Yy]}" ] ;then
    if multipass list | grep -v "Deleted" | grep "^$INSTANCE_NAME " > /dev/null; then
      multipass delete "$INSTANCE_NAME"
      multipass purge
    fi
    sed -i '/cade-multipass/d' "$HOME/.ssh/authorized_keys"
    rm -rf "$SHARE_DIR"
  fi
  exit
fi

if [ "$1" = "stop" ]; then
  multipass stop "$INSTANCE_NAME"
  exit
fi

if [ -n "$1" ]; then
  cat << 'EOF'
Cade: A tool for setting up a charm development environment using Multipass.

Usage:
  cade expose <port>
  cade unexpose
  cade clean
  cade stop
  cade

Options:
  expose <port>      Expose the specified port for the Cade instance.
  unexpose           Terminate the exposed port session for the Cade instance.
  clean              Purge and remove Cade instance and its associated files, after confirmation.
  stop               Stop the Cade instance.
                     (No option) Starts or initializes the Cade instance if not already done.

Notes:
  - `cade expose` sets up an SSH tunnel from the host machine to the Cade instance on the specified port.
  - `cade unexpose` kills the SSH tunnel process for the exposed port.
  - `cade clean` offers a prompt for confirmation before deleting the instance and associated files.
  - Running `cade` with no arguments ensures that the Cade instance is running, mounts the user's home directory, and starts an interactive shell within the instance.
EOF
  exit
fi

if ! multipass list | grep -v "Deleted" | grep "^$INSTANCE_NAME " > /dev/null; then
  echo "Creating instance"
  # We're purging to remove the instance if it was deleted
  multipass purge
  # We're creating the temporary file in $HOME to be sure 
  # that multipass as a snap can read it
  launch_file="$(mktemp -p "$HOME")"
  echo "$LAUNCH_YAML" > "$launch_file"
  sed -i -e "s|@USERNAME@|${USERNAME}|g" "$launch_file"
  multipass launch -n "$INSTANCE_NAME" --cloud-init "$launch_file" --cpus 4 --memory 16G --disk 128G || true
  rm "$launch_file"
fi

multipass start "$INSTANCE_NAME" || true
multipass mount -g "$(id -g):1000" -u "$(id -u):1000" ~ "$INSTANCE_NAME" 2>/dev/null || true

# launching a shell with the correct user inside the VM to the right path
multipass exec "$INSTANCE_NAME" -- sudo -i -u "$USERNAME" "sh -c 'cd "$LAUNCH_DIR"; /bin/bash'"
