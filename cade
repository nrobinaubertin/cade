#!/bin/sh

# `cannot connect to the multipass socket`
# check `sudo snap services` and `sudo snap logs multipass.multipassd`
# It can mean that some service is listening to port 53 for example.

# multipass snap revisions
# 1.16.0-rc3 => 15145
# 1.15.1 =====> 14535
# 1.15.0 =====> 13909
# 1.14.1 =====> 13843
# 1.14.0 =====> 13332

MULTIPASS_REVISION="13843"
INSTANCE_NAME="cade"
SHARE_DIR="$HOME/.local/share/cade"
USERNAME="$(id -un)"
LAUNCH_DIR="$(pwd)"

LAUNCH_YAML=$(
cat <<'EOF'
#cloud-config

package_update: true
package_upgrade: true
package_reboot_if_required: false

users:
  - name: @USERNAME@
    sudo: ALL=(ALL) NOPASSWD:ALL
    groups: users, admin
    lock_passwd: true
    homedir: /home/@USERNAME@

packages:
  - curl
  - exfat-fuse  # for appimages
  - git
  - gnome-keyring
  - iproute2
  - jq
  - ripgrep
  - rsync
  - socat
  - sysstat
  - tox
  - vim

snap:
  commands:
    - snap install charmcraft --classic --channel=latest/stable
    - snap install rockcraft --classic --channel=latest/stable
    - snap install jhack --channel=latest/stable

write_files:
- content: |
    #!/bin/sh
    [ -n "$1" ] && TYPE="$1" || TYPE="CHANNEL"
    [ -n "$2" ] && TARGET="$2" || TARGET="1.32-strict/stable"
    USERNAME="$(id -un)"
    rm -rf "/home/$USERNAME/snap/microk8s/"
    rm -rf "/home/$USERNAME/.local/share/microk8s"
    sudo snap remove --purge microk8s
    case "$TYPE" in
      chan*|CHAN*)
        sudo snap install microk8s --channel="$TARGET";;
      dir*|DIR*)
        cd "$TARGET"
        sudo snap ack microk8s_*.assert
        sudo snap install microk8s_*.snap
        find . -name "*.tar" | xargs -n1 sudo microk8s ctr images import --platform amd64;;
    esac
    mkdir -p "/home/$USERNAME/.kube"
    sudo chown -f -R "$USERNAME" "/home/$USERNAME/.kube"
    sudo snap alias microk8s.kubectl kubectl
    sudo microk8s.enable dns
    sudo microk8s.kubectl rollout status deployments/coredns -n kube-system -w --timeout=600s
    sudo microk8s.enable hostpath-storage
    sudo microk8s.enable ingress
    sudo microk8s.kubectl rollout status deployments/hostpath-provisioner -n kube-system -w --timeout=600s
    sudo microk8s.kubectl rollout status daemonsets/nginx-ingress-microk8s-controller -n ingress -w --timeout=600s
    sudo microk8s.enable rbac
    sudo microk8s.enable registry
    IPADDR=$(ip -4 -j route get 2.2.2.2 | jq -r '.[] | .prefsrc')
    sudo microk8s.enable "metallb:$IPADDR-$IPADDR"
    sudo microk8s start
    sudo microk8s config > "/home/$USERNAME/.kube/config"
  path: /usr/local/bin/prepare_microk8s
  permissions: '0755'
- content: |
    #!/bin/sh
    [ -n "$1" ] && TYPE="$1" || TYPE="CHANNEL"
    [ -n "$2" ] && TARGET="$2" || TARGET="1.32-classic/stable"
    USERNAME="$(id -un)"
    rm -rf "/home/$USERNAME/snap/k8s/"
    sudo snap remove --purge microk8s
    sudo snap remove --purge k8s
    case "$TYPE" in
      chan*|CHAN*)
        sudo snap install k8s --channel="$TARGET" --classic;;
    esac
    sudo k8s bootstrap --name canonicalk8s
    sudo k8s enable ingress
    sudo k8s config > ~/.kube/config
    sudo k8s kubectl apply -f /usr/local/registry.yaml
  path: /usr/local/bin/prepare_canonicalk8s
  permissions: '0755'
- content: |
    ---
    apiVersion: v1
    kind: Namespace
    metadata:
      name: container-registry
    ---
    kind: PersistentVolumeClaim
    apiVersion: v1
    metadata:
      name: registry-claim
      namespace: container-registry
    spec:
      accessModes:
        - ReadWriteOnce
      volumeMode: Filesystem
      resources:
        requests:
          storage: 20Gi
    ---
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      labels:
        app: registry
      name: registry
      namespace: container-registry
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: registry
      template:
        metadata:
          labels:
            app: registry
        spec:
          containers:
            - name: registry
              image: registry:2.8.3
              env:
                - name: REGISTRY_HTTP_ADDR
                  value: :5000
                - name: REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY
                  value: /var/lib/registry
                - name: REGISTRY_STORAGE_DELETE_ENABLED
                  value: "yes"
              ports:
                - containerPort: 5000
                  name: registry
                  protocol: TCP
              volumeMounts:
                - mountPath: /var/lib/registry
                  name: registry-data
          volumes:
            - name: registry-data
              persistentVolumeClaim:
                claimName: registry-claim
    ---
    apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: registry
      name: registry
      namespace: container-registry
    spec:
      type: NodePort
      selector:
        app: registry
      ports:
        - name: "registry"
          port: 5000
          targetPort: 5000
          nodePort: 32000
  path: /usr/local/registry.yaml
  permissions: '0755'
- content: |
    #!/bin/sh
    set -xe
    [ -n "$1" ] && TYPE="$1" || TYPE="CHANNEL"
    [ -n "$2" ] && TARGET="$2" || TARGET="3.6/stable"
    USERNAME="$(id -un)"
    rm -rf "/home/$USERNAME/snap/juju/"
    rm -rf "/home/$USERNAME/.local/share/juju"
    sudo snap remove --purge juju
    case "$TYPE" in
      chan*|CHAN*)
        sudo snap install juju --classic --channel="$TARGET";;
      rev*|REV*)
        sudo snap install juju --classic --revision="$TARGET";;
      ver*|VER*)
        build_juju "$TARGET";;
      dir*|DIR*)
        cd "$TARGET"
        sudo snap ack juju_*.assert
        sudo snap install juju_*.snap
    esac
    juju update-public-clouds --client
  path: /usr/local/bin/prepare_juju
  permissions: '0755'
- content: |
    #!/bin/sh
    build_dir="$(mktemp -d -p "$HOME")"
    cd "$build_dir"
    git clone --depth 1 --branch "juju-$1" https://github.com/juju/juju.git .
    sudo snap install snapcraft --classic
    snapcraft --use-lxd
    sudo snap install *.snap --dangerous
    sudo snap connect juju:config-lxd
    sudo snap connect juju:dot-aws
    sudo snap connect juju:dot-azure
    sudo snap connect juju:dot-google
    sudo snap connect juju:dot-kubernetes
    sudo snap connect juju:dot-local-share-juju
    sudo snap connect juju:dot-maas
    sudo snap connect juju:dot-openstack
    sudo snap connect juju:dot-oracle
    sudo snap connect juju:lxd lxd
    sudo snap connect juju:network
    sudo snap connect juju:network-bind
    sudo snap connect juju:peers microk8s
    sudo snap connect juju:ssh-keys
    rm -rf "$build_dir"
  path: /usr/local/bin/build_juju
  permissions: '0755'
- content: |
    #!/bin/sh
    [ -n "$1" ] && TYPE="$1" || TYPE="CHANNEL"
    [ -n "$2" ] && TARGET="$2" || TARGET="5.21/stable"
    USERNAME="$(id -un)"
    rm -rf "/home/$USERNAME/snap/lxd/"
    rm -rf "/home/$USERNAME/.local/share/lxd"
    sudo snap remove --purge lxd
    case "$TYPE" in
      chan*|CHAN*)
        sudo snap install lxd --channel="$TARGET";;
      dir*|DIR*)
        cd "$TARGET"
        sudo snap ack lxd_*.assert
        sudo snap install lxd_*.snap
    esac
    lxd init --auto
  path: /usr/local/bin/prepare_lxd
  permissions: '0755'
- content: |
    #!/bin/sh
    sudo -i -u "@USERNAME@" bash -c "cd $1; exec bash"
  path: /usr/local/bin/start
  permissions: '0755'
- content: |
    #!/bin/sh
    juju unregister --no-prompt lxd
    juju bootstrap localhost lxd
    juju model-defaults --cloud=localhost logging-config='<root>=WARNING;unit=DEBUG;http=TRACE'
    juju add-model machine localhost
  path: /usr/local/bin/bootstrap_machine
  permissions: '0755'
- content: |
    #!/bin/sh
    juju unregister --no-prompt k8s
    if command -v k8s >/dev/null; then
      sudo k8s config | juju add-k8s k8s --client
    fi
    juju bootstrap k8s k8s
    juju model-defaults --cloud=k8s logging-config='<root>=WARNING;unit=DEBUG;http=TRACE'
    juju add-model k8s k8s
  path: /usr/local/bin/bootstrap_k8s
  permissions: '0755'

runcmd:
  - |
    # disable swap (microk8s doesn't like swap)
    sysctl -w vm.swappiness=0
    echo "vm.swappiness = 0" | tee -a /etc/sysctl.conf
    swapoff -a

  - |
    # add lxd group for later
    # Follow: https://github.com/canonical/ubuntu-core-desktop-snapd/blob/master/osutil/user.go#L150
    groupadd --system lxd
    useradd --system --home-dir /nonexistent --no-create-home --shell /bin/false --no-user-group -g lxd lxd
    adduser @USERNAME@ lxd

  - |
    # add microk8s groups for later
    # Follow: https://github.com/canonical/ubuntu-core-desktop-snapd/blob/master/osutil/user.go#L150
    # 584789 should be used as uid/gid for snap_microk8s: https://github.com/snapcore/snapd/blob/master/snap/system_usernames.go#L156C24-L156C30
    groupadd --system --gid 584789 snap_microk8s
    useradd --system --home-dir /nonexistent --no-create-home --shell /bin/false --no-user-group -g snap_microk8s --uid 584789 snap_microk8s
    adduser @USERNAME@ snap_microk8s
    groupadd --system microk8s
    useradd --system --home-dir /nonexistent --no-create-home --shell /bin/false --no-user-group -g microk8s microk8s
    adduser @USERNAME@ microk8s

  - |
    # disable unnecessary services
    systemctl disable man-db.timer man-db.service --now
    systemctl disable apport.service apport-autoreport.service  --now
    systemctl disable apt-daily.service apt-daily.timer --now
    systemctl disable apt-daily-upgrade.service apt-daily-upgrade.timer --now
    systemctl disable unattended-upgrades.service --now
    systemctl disable motd-news.service motd-news.timer --now
    systemctl disable bluetooth.target --now
    systemctl disable ua-messaging.service ua-messaging.timer --now
    systemctl disable ua-timer.timer ua-timer.service --now
    systemctl disable systemd-tmpfiles-clean.timer --now

  - |
    # Disable IPv6
    echo "net.ipv6.conf.all.disable_ipv6=1" | tee -a /etc/sysctl.conf
    echo "net.ipv6.conf.default.disable_ipv6=1" | tee -a /etc/sysctl.conf
    echo "net.ipv6.conf.lo.disable_ipv6=1" | tee -a /etc/sysctl.conf
    sysctl -p

  - |
    # apt cleanup
    apt remove -y landscape-client landscape-common
    apt-get autoremove -y

  - |
    # add skopeo to the PATH (this is for 22.04, TODO: change that for 24.04)
    sudo ln -sf /snap/rockcraft/current/bin/skopeo /usr/local/bin/skopeo

  - |
    # Issue with snaps
    # `/user.slice/user-1001.slice/session-4.scope is not a snap cgroup`
    # https://forum.snapcraft.io/t/cannot-launch-snap-applications-with-cgroup-v2/27700
    # https://forum.snapcraft.io/t/system-slice-cron-service-is-not-a-snap-cgroup/30196
    loginctl enable-linger @USERNAME@

  - |
    # prepare jhack
    sudo snap connect jhack:dot-local-share-juju snapd
    sudo snap connect jhack:ssh-read snapd
EOF
)

if [ "$1" = "expose" ]; then
  if [ -z "$2" ]; then
    echo "You need to specify a port"
    exit 1
  fi
  cade unexpose
  mkdir -p "$SHARE_DIR"
  [ -f "$SHARE_DIR"/sshkey ] || ssh-keygen -N "" -t ed25519 -C "cade-multipass-$(date -I)" -f "$SHARE_DIR/sshkey"
  sed -i '/cade-multipass/d' "$HOME/.ssh/authorized_keys"
  cat "$SHARE_DIR/sshkey.pub" >> "$HOME/.ssh/authorized_keys"
  cade_ip="$(multipass list | grep "$INSTANCE_NAME" | awk '{print $3}')"
  sudo ssh -N -f -o "StrictHostKeyChecking=accept-new" -M -S "$SHARE_DIR/expose-tunnel" -i "$SHARE_DIR/sshkey" -L "$2:127.0.0.1:$2" -l "$USERNAME" "$cade_ip"
  echo "listen on http://$cade_ip:$2"
  exit
fi

if [ "$1" = "unexpose" ]; then
  if [ -S "$SHARE_DIR/expose-tunnel" ]; then
    cade_ip="$(multipass list | grep "$INSTANCE_NAME" | awk '{print $3}')"
    sudo ssh -S "$SHARE_DIR/expose-tunnel" -O exit "$cade_ip"
  fi
  exit
fi

if [ "$1" = "clean" ]; then
  printf 'Are you sure (y/N)? '
  read -r answer
  if [ "$answer" != "${answer#[Yy]}" ] ;then
    if multipass list | grep -v "Deleted" | grep "^$INSTANCE_NAME " > /dev/null; then
      multipass delete "$INSTANCE_NAME"
      multipass purge
    fi
    sed -i '/cade-multipass/d' "$HOME/.ssh/authorized_keys"
    rm -rf "$SHARE_DIR"
  fi
  exit
fi

if [ "$1" = "stop" ]; then
  multipass stop "$INSTANCE_NAME"
  exit
fi

if [ "$1" = "prepare" ]; then
  multipass stop "$INSTANCE_NAME"
  sudo snap remove multipass --purge
  # We install a fixed version of multipass to avoid surprises
  sudo snap install multipass --revision=$MULTIPASS_REVISION
  # We need to hold the version to avoid auto-updates
  sudo snap refresh --hold multipass
  exit
fi

if [ -n "$1" ]; then
  cat << 'EOF'
Cade: A tool for setting up a charm development environment using Multipass.

Usage:
  cade expose <port>
  cade unexpose
  cade clean
  cade stop
  cade

Options:
  expose <port>      Expose the specified port for the Cade instance.
  unexpose           Terminate the exposed port session for the Cade instance.
  clean              Purge and remove Cade instance and its associated files, after confirmation.
  stop               Stop the Cade instance.
                     (No option) Starts or initializes the Cade instance if not already done.

Notes:
  - `cade expose` sets up an SSH tunnel from the host machine to the Cade instance on the specified port.
  - `cade unexpose` kills the SSH tunnel process for the exposed port.
  - `cade clean` offers a prompt for confirmation before deleting the instance and associated files.
  - Running `cade` with no arguments ensures that the Cade instance is running, mounts the user's home directory, and starts an interactive shell within the instance.
EOF
  exit
fi

if ! multipass list | grep -v "Deleted" | grep "^$INSTANCE_NAME " > /dev/null; then
  echo "Creating instance"
  # We're purging to remove the instance if it was deleted
  multipass purge
  echo "Deleted instances purged"
  # We're creating the temporary file in $HOME to be sure 
  # that multipass as a snap can read it
  launch_file="$(mktemp -p "$HOME")"
  echo "$LAUNCH_YAML" > "$launch_file"
  sed -i -e "s|@USERNAME@|$USERNAME|g" "$launch_file"
  echo "Creating the $INSTANCE_NAME instance"
  echo "multipass launch -n '$INSTANCE_NAME' --cloud-init '$launch_file' --cpus 4 --memory 16G --disk 256G"
  multipass launch -n "$INSTANCE_NAME" --cloud-init "$launch_file" --cpus 4 --memory 16G --disk 256G || true
  multipass stop "$INSTANCE_NAME"
  rm "$launch_file"
fi

echo "Start $INSTANCE_NAME"

multipass mount -g "$(id -g):1000" -u "$(id -u):1000" --type native ~ "$INSTANCE_NAME:/home/$USERNAME" 2>/dev/null || true
multipass start "$INSTANCE_NAME" || true

# launching a shell with the correct user inside the VM to the right path
echo "$LAUNCH_DIR"
set -xe
multipass exec "$INSTANCE_NAME" -- sudo -i -u "$USERNAME" start "$LAUNCH_DIR"
